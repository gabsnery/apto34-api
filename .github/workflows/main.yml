name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
    environment: apto34-aplication 
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Create .env file
      run: |
          echo "GOOGLE_STORAGE_KEYFILENAME=${{ secrets.GOOGLE_STORAGE_KEYFILENAME }}" >> .env
          echo "GOOGLE_STORAGE_BUCKETNAME=${{ secrets.GOOGLE_STORAGE_BUCKETNAME }}" >> .env
          echo "FRONT_APP_URL=${{ secrets.FRONT_APP_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "TOKEN_KEY=${{ secrets.TOKEN_KEY }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "REACT_APP_MERCADOLIVRE_TOKEN=${{ secrets.REACT_APP_MERCADOLIVRE_TOKEN }}" >> .env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}" >> .env
          echo "NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}" >> .env
          cat .env  # Verificar o conteÃºdo do arquivo .env
          docker build -t ${{ secrets.DOCKER_USERNAME }}/node-api:${{ github.sha }} .
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1  
    - name: Log in to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/node-api:${{ github.sha }} .
        docker push ${{ secrets.DOCKER_USERNAME }}/node-api:${{ github.sha }}
  deploy:
    needs: build  
    runs-on: ubuntu-latest
    environment: apto34-aplication 
    steps:
    - name: Stop and remove any existing container
      run: |
        docker stop node-api || true
        docker rm node-api || true
    - name: SSH to VM and deploy
      uses: appleboy/ssh-action@v0.1.7  
      with:
        host: ${{ secrets.GCP_VM_IP }}
        username: ${{ secrets.GCP_VM_USERNAME }}
        key: ${{ secrets.GCP_VM_SSH_KEY }}
        passphrase: ${{ secrets.GCP_VM_PASSPHRASE }}
        script: |
          echo "GOOGLE_STORAGE_KEYFILENAME=${{ secrets.GOOGLE_STORAGE_KEYFILENAME }}" >> .env
          echo "GOOGLE_STORAGE_BUCKETNAME=${{ secrets.GOOGLE_STORAGE_BUCKETNAME }}" >> .env
          echo "FRONT_APP_URL=${{ secrets.FRONT_APP_URL }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "TOKEN_KEY=${{ secrets.TOKEN_KEY }}" >> .env
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> .env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env
          echo "REACT_APP_MERCADOLIVRE_TOKEN=${{ secrets.REACT_APP_MERCADOLIVRE_TOKEN }}" >> .env
          echo "SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}" >> .env
          echo "EMAIL_USER=${{ secrets.EMAIL_USER }}" >> .env
          echo "EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}" >> .env
          echo "NEW_RELIC_APP_NAME=${{ secrets.NEW_RELIC_APP_NAME }}" >> .env
          echo "NEW_RELIC_LICENSE_KEY=${{ secrets.NEW_RELIC_LICENSE_KEY }}" >> .env
          docker pull ${{ secrets.DOCKER_USERNAME }}/node-api:${{ github.sha }}
          docker stop node-api || true
          docker rm node-api || true
          docker run --env-file .env -d -p 3006:3006 --name node-api ${{ secrets.DOCKER_USERNAME }}/node-api:${{ github.sha }}
